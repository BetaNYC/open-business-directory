{
  "version": 3,
  "file": "bundle.css",
  "sources": [
    "../../App.svelte",
    "../../Header.svelte",
    "../../MapView.svelte",
    "../../MaterialIcon.svelte",
    "../../Sidebar.svelte",
    "../../TopButton.svelte",
    "../../TranslationMenu.svelte",
    "../../Legend.svelte",
    "../../AddressSearch.svelte",
    "../../RowItem.svelte",
    "../../RowItems.svelte",
    "../../ItemDetails.svelte",
    "../../ItemDetailsInfo.svelte",
    "../../LastUpdated.svelte",
    "../../Status.svelte",
    "../../CategoryFilters.svelte",
    "../../NameSearch.svelte",
    "../../OpenedFilter.svelte",
    "../../OtherFilters.svelte",
    "../../OutdoorSeating.svelte",
    "../../PickupDeliveryFilter.svelte"
  ],
  "sourcesContent": [
    "<script>\n    import Header from './components/Header.svelte'\n    import MapView from './components/MapView.svelte'\n    import Sidebar from './components/Sidebar.svelte'\n    import TopButton from './components/TopButton.svelte'\n\n    import {rows, filters} from './stores'\n\n\n    import {onMount} from 'svelte'\n    import importData from './utils/importData'\n\n    $: items = $rows.filter(row => $filters.every(f => f.filter(row)))\n\n    onMount(() => {\n        importData('data/rows.csv', rows)\n    })\n</script>\n\n<main>\n    <Header/>\n    <div class=\"content\">\n        <div class=\"sidebar\">\n            <Sidebar {items}/>\n        </div>\n        <div class=\"map\">\n            <MapView />\n        </div>\n    </div>\n</main>\n<TopButton/>\n\n<style>\n    main {\n        display: flex;\n        flex-direction: column;\n        height: 98vh;\n        margin: 0px auto;\n        max-width: 1500px;\n        color: #444;\n        padding: 0px 25px;\n    }\n\n    main > * {\n        flex: 1;\n    }\n\n    .content {\n        margin: 1rem 0rem;\n        display: flex;\n        flex-wrap: wrap;\n    }\n\n    .map {\n        flex: 2.5 1 300px;\n        min-width: 300px;\n    }\n\n    .sidebar {\n        flex: 1 1 300px;\n        min-width: 300px;\n        position: relative;\n        margin-right: 1rem;\n    }\n\n\n    @media only screen and (max-width: 768px) {\n        main {\n            padding: 0 30px;\n        }\n\n        .content {\n            min-height: 700px;\n        }\n\n        .content > div {\n            min-width: 51%;\n        }\n\n        .sidebar {\n            height: 800px;\n            margin-right: 0px;\n            margin-bottom: 1rem;\n        }\n\n        .map {\n            height: 500px;\n        }\n    }\n\n    :global(.is-1, .is-2, .is-3, .is-4, .is-5, .is-6, .is-7) {\n        font-family: 'Merriweather', serif;\n    }\n\n</style>",
    "<script>\n    import TranslationMenu from './TranslationMenu.svelte'\n    import MaterialIcon from './MaterialIcon.svelte'\n\n    let innerWidth\n    let opened = false;\n\n</script>\n\n<svelte:window bind:innerWidth={innerWidth}/>\n\n<header>\n    {#if innerWidth > 768}\n        <div class=\"header-bar\">\n            <h3 class=\"title is-3\" id=\"title\">Essentially Open North Brooklyn</h3>\n            <div class=\"buttons has-text-right\">\n                <TranslationMenu className=\"is-small\"/>\n                <button class=\"button is-small {opened ? 'is-clicked' : ''}\" on:click={() => opened = !opened}>\n                    <MaterialIcon icon=\"info\"></MaterialIcon>\n                </button>\n            </div>\n        </div>\n        {#if opened}\n            <div id=\"subtitle\">\n                <p class=\"is-6 subtitle\"><strong>Community mapping of Greenpoint and Williamsburg businesses operating\n                    during the COVID-19 crisis.</strong>\n                    <br/><br/>We are updating these listings regularly, but please check their Instagram, website, or\n                    call for\n                    the most current information.</p>\n                <p class=\"is-6 subtitle\">Maintained by <a href=\"http://northbrooklynneighbors.org/\">North Brooklyn\n                    Neighbors</a> and\n                    <a href=\"http://northbrooklynmutualaid.org/\">North Brooklyn Mutual Aid</a>.\n                    To add or update info fill out <a href=\"https://airtable.com/shrGc92OIWFQoSf5X\" target=\"_blank\">this\n                        form</a>.</p>\n            </div>\n        {/if}\n    {:else}\n        <div class=\"header-bar\">\n            <h3 class=\"title is-5\">Essentially Open North Brooklyn</h3>\n            <div class=\"buttons has-text-right\">\n                <TranslationMenu className=\"is-small\"/>\n                <button class=\"button is-small {opened ? 'is-clicked' : ''}\" on:click={() => opened = !opened}>\n                    <MaterialIcon icon=\"info\"></MaterialIcon>\n                </button>\n            </div>\n        </div>\n        {#if opened}\n            <div id=\"subtitle\">\n                <p class=\"is-6 subtitle\"><strong>Community mapping of Greenpoint and Williamsburg businesses operating\n                    during the COVID-19 crisis.</strong>\n                    <br/><br/>We are updating these listings regularly, but please check their Instagram, website, or\n                    call for\n                    the most current information.</p>\n                <p class=\"is-6 subtitle\">Maintained by <a href=\"http://northbrooklynneighbors.org/\">North Brooklyn\n                    Neighbors</a> and\n                    <a href=\"http://northbrooklynmutualaid.org/\">North Brooklyn Mutual Aid</a>.\n                    To add or update info fill out <a href=\"https://airtable.com/shrGc92OIWFQoSf5X\" target=\"_blank\">this\n                        form</a>.</p>\n            </div>\n        {/if}\n    {/if}\n</header>\n\n<style>\n    .header-bar {\n        margin: 1rem 0rem;\n        display: flex;\n        flex-direction: row;\n        flex-wrap: wrap;\n        justify-content: space-between;\n    }\n\n    .title {\n        margin-bottom: 10px !important;\n    }\n\n    .has-background-warning{\n        padding: 0.2rem 1rem ;\n    }\n\n    @media only screen and (max-width: 768px) {\n\n        #subtitle {\n            margin-top: 5px;\n            background-color: #eaeaea;\n            padding: 1rem 2rem;\n            z-index: 2;\n        }\n    }\n\n    .is-clicked {\n        background-color: #ecf1f8;\n    }\n\n    p {\n        margin-bottom: 0.25rem !important;\n    }\n</style>",
    "<script>\n    import Legend from './map/Legend.svelte'\n    import {mapObject, selectedItem, filters, rows, filterExtent} from '../stores'\n    import {styles} from '../constants'\n    import {onMount} from 'svelte'\n\n    let map\n    let container;\n    let loaded = false\n    let popup\n    let previousSelectedItem\n    let lastFeature\n\n    //filter using everything but map-extent\n    $: items = $rows.filter(row => $filters.filter(f => f.label !== 'map-extent').every(f => f.filter(row)))\n\n    function updateExtentFilter(filterExtent) {\n        console.log('filtering')\n        const features = map.queryRenderedFeatures({layers: ['markers', 'points']});\n\n        if (features) {\n            const unqiueIds = [...new Set(features.map(feature => feature.properties.id))]\n            if ($filters) {\n                //remove existing filter\n                const _filters = $filters\n                const filter = _filters.findIndex(f => f.label === 'map-extent')\n                if (filter > -1) _filters.splice(filter, 1)\n                if (filterExtent) {\n                    //generate new filter\n                    const mapExtentFilter = {\n                        label: 'map-extent',\n                        filter: row => unqiueIds.includes(row.id)\n                    }\n                    filters.set([..._filters, mapExtentFilter])\n                } else {\n                    filters.set(_filters)\n                }\n            }\n        }\n    }\n\n    $: if (map && loaded) updateExtentFilter($filterExtent) //update filter when $filterExtent checkbox store changes\n\n    function generateFeatures(items) {\n        return {\n            type: 'FeatureCollection',\n            features: items.map(item => {\n                return {\n                    type: 'Feature',\n                    id: item.id,\n                    geometry: {\n                        type: 'Point',\n                        coordinates: item.coordinates\n                    },\n                    properties: item\n                }\n            })\n        }\n    }\n\n    onMount(() => {\n        mapboxgl.accessToken = 'pk.eyJ1IjoiemhpayIsImEiOiJjaW1pbGFpdHQwMGNidnBrZzU5MjF5MTJiIn0.N-EURex2qvfEiBsm-W9j7w';\n        map = new mapboxgl.Map({\n            container,\n            style: 'mapbox://styles/zhik/ckacv5hvo0uvs1iqjctbbbcnv',\n            center: [-73.9482, 40.7184],\n            zoom: 13,\n            maxZoom: 20,\n            minZoom: 12\n        });\n\n        map.addControl(new mapboxgl.NavigationControl());\n\n        // //To pan and zoom, use 2 fingers\n        // map.addControl(new MultiTouch());\n\n        popup = new mapboxgl.Popup({\n            closeButton: false,\n            closeOnClick: false\n        });\n\n        map.on('load', () => {\n            const data = generateFeatures(items)\n\n            map.addSource('points', {\n                type: 'geojson',\n                data\n            })\n\n            const zoomThreshold = 16\n\n            map.addLayer({\n                id: 'points',\n                type: 'circle',\n                source: 'points',\n                maxzoom: zoomThreshold,\n                paint: {\n                    'circle-color': ['get', 'fillColor'],\n                    'circle-stroke-color': [\n                        'case',\n                        ['boolean', ['feature-state', 'highlight'], false],\n                        '#ffef78',\n                        ['get', 'strokeColor']\n                    ],\n                    'circle-stroke-width': [\n                        'case',\n                        ['boolean', ['feature-state', 'highlight'], false],\n                        5,\n                        0.5\n                    ],\n                    'circle-stroke-opacity': [\n                        'case',\n                        ['boolean', ['get', '_closed'], false],\n                        0.5,\n                        1\n                    ],\n                    'circle-opacity': [\n                        'case',\n                        ['boolean', ['get', '_closed'], false],\n                        0.5,\n                        1\n                    ],\n                    'circle-radius': [\n                        'interpolate',\n                        ['exponential', .5],\n                        ['zoom'],\n                        14, 3,\n                        16, 5,\n                        18, 6\n                    ]\n                }\n            });\n\n            map.on('mouseenter', 'points', (e) => {\n                map.getCanvas().style.cursor = 'pointer';\n                const feature = e.features[0]\n                const coordinates = feature.geometry.coordinates.slice();\n                const {Name, Category, Address} = feature.properties\n                const description = `<h6>${Name}</h6><p>${Category}</p><p>${Address}</p>`\n\n                popup\n                        .setLngLat(coordinates)\n                        .setHTML(description)\n                        .addTo(map);\n            })\n\n            map.on('mousemove', 'points', e => {\n                const feature = map.queryRenderedFeatures(e.point)[0];\n                if (feature.properties.id !== lastFeature) {\n                    lastFeature = feature.properties.id;\n                    const coordinates = feature.geometry.coordinates.slice();\n                    const {Name, Category, Address} = feature.properties\n                    const description = `<h6>${Name}</h6><p>${Category}</p><p>${Address}</p>`\n                    popup.remove();\n                    popup\n                            .setLngLat(coordinates)\n                            .setHTML(description)\n                            .addTo(map);\n                }\n            });\n\n            map.on('mouseleave', 'points', () => {\n                map.getCanvas().style.cursor = '';\n                popup.remove();\n            });\n\n            map.on('click', () => {\n                selectedItem.select(null)\n            })\n\n            map.on('click', 'points', (e) => {\n                const feature = e.features[0]\n                selectedItem.select(feature.properties)\n            });\n\n            //load icon and symbol layer\n            const uniqueStyleIcons = [...new Set(styles.map(style => style.icon))]\n\n            Promise.all(\n                    uniqueStyleIcons.map(icon => ({\n                        url: `./icons/${icon}`,\n                        id: icon\n                    })).map(img => new Promise((resolve, reject) => {\n                        map.loadImage(img.url, function (error, res) {\n                            map.addImage(img.id, res)\n                            resolve();\n                        })\n                    }))\n            )\n                    .then(() => {\n                        loaded = true;\n\n                        map.addLayer({\n                            id: 'markers',\n                            type: 'symbol',\n                            minzoom: zoomThreshold,\n                            source: 'points',\n                            layout: {\n                                'icon-image': ['get', 'icon'],\n                                'icon-allow-overlap': true,\n                                'icon-size': [\n                                    'interpolate',\n                                    ['exponential', 0.6],\n                                    ['zoom'],\n                                    15, 0.5,\n                                    18, 0.8,\n                                    20, 1\n                                ]\n                            },\n                            paint: {\n                                'icon-opacity': [\n                                    'case',\n                                    ['boolean', ['get', '_closed'], false],\n                                    0.5,\n                                    1\n                                ]\n                            }\n                        });\n\n                        map.on('mouseenter', 'markers', (e) => {\n                            map.getCanvas().style.cursor = 'pointer';\n                            const feature = e.features[0]\n                            const coordinates = feature.geometry.coordinates.slice();\n                            const {Name, Category, Address} = feature.properties\n                            const description = `<h6>${Name}</h6><p>${Category}</p><p>${Address}</p>`\n\n                            popup\n                                    .setLngLat(coordinates)\n                                    .setHTML(description)\n                                    .addTo(map);\n                        })\n\n                        map.on('mousemove', 'markers', e => {\n                            const feature = map.queryRenderedFeatures(e.point)[0];\n                            if (feature.properties.id !== lastFeature) {\n                                lastFeature = feature.properties.id;\n                                const coordinates = feature.geometry.coordinates.slice();\n                                const {Name, Category, Address} = feature.properties\n                                const description = `<h6>${Name}</h6><p>${Category}</p><p>${Address}</p>`\n                                popup.remove();\n                                popup\n                                        .setLngLat(coordinates)\n                                        .setHTML(description)\n                                        .addTo(map);\n                            }\n                        });\n\n                        map.on('mouseleave', 'markers', () => {\n                            map.getCanvas().style.cursor = '';\n                            popup.remove();\n                        });\n\n                        map.on('click', 'markers', (e) => {\n                            const feature = e.features[0]\n                            selectedItem.select(feature.properties)\n                        });\n\n                        map.on('moveend', () => updateExtentFilter($filterExtent));\n\n                    })\n        })\n\n        mapObject.set(map)\n    })\n\n    $: if (map && loaded) {\n        const data = generateFeatures(items)\n        const layer = map.getSource('points')\n        if (layer) {\n            layer.setData(data);\n        }\n    }\n\n    $: if (map && loaded) {\n        if (previousSelectedItem) {\n            //remove previous selectedItem\n            map.setFeatureState({source: 'points', id: previousSelectedItem.id}, {highlight: false});\n        }\n        if ($selectedItem) {\n            map.setFeatureState({source: 'points', id: $selectedItem.id}, {highlight: true});\n        }\n        previousSelectedItem = $selectedItem\n    }\n\n\n</script>\n\n<div id=\"map\" bind:this={container}>\n    <Legend/>\n</div>\n\n<style>\n    #map {\n        width: 100%;\n        height: 100%;\n    }\n\n    :global(.mapboxgl-popup) {\n        max-width: 400px;\n    }\n\n    :global(.mapboxgl-popup-content) {\n        border: 1px solid rgba(211, 211, 211, 0.5);\n    }\n\n    :global(.mapboxgl-popup-content p) {\n        margin-bottom: 1px !important;\n    }\n</style>",
    "<script>\n    export let icon = ''\n    export let size = ''\n    export let alt = ''\n</script>\n\n<span class=\"material-icons notranslate {size}\" translate=\"no\"  title={alt}>{icon}</span>\n\n<style>\n    .small{\n        font-size: 0.8rem;\n    }\n</style>",
    "<script>\n    import {selectedItem} from '../stores'\n    import NameSearch from './sidebar/filters/NameSearch.svelte'\n    import RowItems from './sidebar/RowItems.svelte'\n    import ItemDetails from './sidebar/details/ItemDetails.svelte'\n    import OtherFilters from './sidebar/filters/OtherFilters.svelte'\n    import AddressSearch from './sidebar/AddressSearch.svelte'\n\n    export let items = []\n</script>\n\n<div class=\"sidebar-content\">\n    <div class=\"search\">\n        <AddressSearch/>\n        <NameSearch/>\n        <OtherFilters/>\n    </div>\n    <div class=\"items\">\n        <RowItems {items} show={!$selectedItem}/>\n        {#if $selectedItem}\n            <ItemDetails/>\n        {/if}\n    </div>\n</div>\n\n<style>\n    .sidebar-content {\n        display: flex;\n        flex-direction: column;\n        height: 100%;\n    }\n\n\n    .items {\n        margin-top: 1rem;\n        flex: 0 1 auto;\n        position: relative;\n        height: inherit;\n        overflow: auto;\n        box-shadow: 0px 0px 2px 2px rgba(128, 128, 128, 0.2);\n    }\n</style>",
    "<script>\n    import MaterialIcon from './MaterialIcon.svelte'\n\n    let scrollY\n    let innerHeight\n\n    function scrollTop() {\n        document.body.scrollTop = 0;\n        document.documentElement.scrollTop = 0;\n    }\n</script>\n\n<svelte:window bind:scrollY={scrollY} bind:innerHeight={innerHeight}/>\n\n{#if scrollY + innerHeight > document.body.offsetHeight + 15}\n    <button class=\"button is-rounded\" on:click={scrollTop}>\n        <MaterialIcon icon=\"keyboard_arrow_up\"/>\n    </button>\n{/if}\n\n<style>\n    button {\n        z-index: 2;\n        position: fixed;\n        bottom: 5px;\n        right: 10px;\n    }\n</style>",
    "<script>\n    import MaterialIcon from './MaterialIcon.svelte'\n    import {onDestroy} from 'svelte'\n\n    export let className = \"\"\n    export let opened = false\n\n</script>\n\n<svelte:head>\n    <script type=\"text/javascript\">\n        window.translateElement = null\n\n        function googleTranslateElementInit() {\n            if (window.translateElement) return\n            window.translateElement = google.translate.TranslateElement(\n                {pageLanguage: 'en'},\n                'google_translate_element'\n            );\n        }\n    </script>\n\n    <script type=\"text/javascript\"\n            src=\"//translate.google.com/translate_a/element.js?cb=googleTranslateElementInit\"></script>\n</svelte:head>\n\n<div class=\"has-text-right translation-menu\">\n    <button class=\"button {className} {opened ? 'is-clicked' : ''}\" on:click={()=> opened = !opened}>\n        <MaterialIcon icon=\"translate\"/>\n    </button>\n    <div id=\"google_translate_element\" class=\"menu {opened ? '' : 'is-hidden'}\"></div>\n</div>\n\n<style>\n    .button {\n        margin-right: 0.5rem;\n    }\n\n    .menu {\n        position: absolute;\n        right: 2rem;\n        z-index: 2;\n        background-color: rgba(239, 239, 239, 1);\n        padding: 0.2rem 1rem;\n    }\n\n    .is-clicked {\n        background-color: #ecf1f8;\n    }\n\n    .translation-menu {\n        z-index: 3;\n    }\n</style>",
    "<script>\n    import {categoryGroups, styles} from '../../constants'\n\n    let opened = localStorage.getItem('header') === null ? true : JSON.parse(localStorage.getItem('header'));\n\n    function toggleOpen(){\n        //toggle and save to local storage\n        opened = !opened\n        localStorage.setItem('header', opened)\n    }\n\n    //group similar colors\n    const groups = styles.filter(i => i.group).reduce((groups, i) => {\n        const color = i.fillColor,\n                name = i.categoryName\n        if (!(color in groups)){\n            //setup object\n            groups[color] = {names: [], color}\n        }\n\n        if(!groups[color].names.includes(name)){\n            //only push if unique\n            groups[color].names.push(name)\n        }\n\n        return groups\n    }, {})\n</script>\n\n<div class=\"legend\" id=\"legend\">\n    <div class=\"legend-title\">\n        <h5>Legend</h5>\n        <p><a href=\"#legend\" aria-label=\"Hide map legend\" on:click={toggleOpen}>{opened ? 'Hide' : 'Show'}</a></p>\n    </div>\n    {#if opened}\n        {#each Object.values(groups) as group}\n            <div class=\"legend-item\">\n                <div class=\"marker marker-category\" style=\"background-color: {group.color}\"></div>\n                <div>{group.names.join(', ')}</div>\n            </div>\n        {/each}\n    {/if}\n</div>\n\n<style>\n    .legend {\n        line-height: 18px;\n        color: #212121;\n        position: absolute;\n        right: 5px;\n        bottom: 30px;\n        z-index: 200;\n        border-radius: 3px;\n        background-color: rgba(255, 255, 255, 0.8);\n        box-shadow: 0px 1px 2px rgba(136, 136, 136, 0.6);\n        padding: 5px 5px;\n        margin-bottom: 0px;\n        max-width: 80%;\n    }\n    .legend-title {\n        display: flex;\n        flex-direction: row;\n        justify-content: space-between;\n    }\n    .legend-title p{\n        margin-bottom: 0;\n    }\n    .legend-title h5{\n        margin-right: 1rem;\n        margin-bottom: 0;\n    }\n    .legend-item {\n        letter-spacing: -0.2px;\n        margin-right: 1rem;\n        display: flex;\n        flex-direction: row;\n    }\n    .legend-item .marker {\n        margin-right: 1rem;\n        width: 16px;\n        height: 16px;\n    }\n</style>",
    "<script>\n    import {mapObject, filterExtent} from '../../stores'\n\n    let value = ''\n    let searchAddrs = []\n    let error = false\n\n    let markerLayer = null;\n\n    function _set(addr) {\n        //set value to clicked addr , then clear searchAddrs\n        if (typeof addr === 'string') {\n            value = addr\n        }\n        searchAddrs = []\n        fetch(`https://geosearch.planninglabs.nyc/v1/autocomplete?text=${value}&size=1`)\n                .then(response => response.json())\n                .then(response => {\n                    //use the first address\n                    if (response.features.length > 0) {\n                        const coords = response.features[0].geometry.coordinates\n\n                        $mapObject.flyTo({center: coords, zoom: 15.5})\n\n                        //add marker to map\n                        if (!markerLayer) {\n                            markerLayer = new mapboxgl.Marker().setLngLat(coords)\n                            markerLayer.addTo($mapObject);\n                        } else {\n                            markerLayer = new mapboxgl.Marker().setLngLat(coords)\n                        }\n\n                    } else {\n                        //throw error\n                        error = true\n                    }\n                })\n    }\n\n    function _search() {\n        if (value.length > 1) {\n            fetch(`https://geosearch.planninglabs.nyc/v1/autocomplete?text=${value}, Manhattan&size=5`)\n                    .then(response => response.json())\n                    .then(\n                            response => {\n                                searchAddrs = response.features\n                                        .map(feature =>\n                                                feature.properties.label.replace(', New York, NY, USA', '')\n                                        )\n                                        .slice(0, 5)\n                                if (searchAddrs.length > 0) {\n                                    error = false\n                                }\n                            }\n                    )\n        } else {\n            searchAddrs = []\n        }\n    }\n</script>\n\n<form on:submit|preventDefault=\"{_set}\">\n    <div class=\"field\">\n        <label class=\"label\">Search an Address</label>\n        <div class=\"field\">\n            <div class=\"control is-expanded\">\n                <input\n                        id=\"address\"\n                        placeholder=\"240 Division Ave\"\n                        type=\"text\"\n                        name=\"address\"\n                        bind:value\n                        autocomplete=\"off\"\n                        on:keyup=\"{() => {_search()}}\"\n                        class=\"{!error ? 'input is-fullwidth' : 'input is-fullwidth is-danger'}\"\n                />\n            </div>\n        </div>\n    </div>\n\n    {#if error}\n        <p class=\"help is-danger\">\n            No addresses found\n        </p>\n    {/if}\n\n    <ul>\n        {#each searchAddrs as addr}\n            <li lass=\"is-hoverable\" on:click=\"{() => _set(addr)}\">{addr}</li>\n        {/each}\n    </ul>\n    <div class=\"field\">\n        <label class=\"checkbox\">\n            <input type=\"checkbox\" bind:checked={$filterExtent}>Search within map extent\n        </label>\n    </div>\n</form>\n\n<style>\n    form {\n        margin-bottom: 1rem;\n    }\n\n    #address {\n        width: 100%;\n        padding: 0px 10px;\n        box-sizing: border-box;\n        margin-bottom: 5px;\n    }\n\n    input[type='submit'] {\n        background-color: #6a6a6a;\n        border: none;\n        color: white;\n        padding: 5px 10px;\n        text-decoration: none;\n        cursor: pointer;\n    }\n\n    ul {\n        color: rgb(61, 61, 61);\n        background-color: #ffffff;\n        width: 100%;\n        position: absolute;\n        z-index: 2;\n        margin: 0px !important;\n\n    }\n\n    li {\n        margin-left: 5px;\n        list-style-type: none;\n    }\n\n    li:hover {\n        background-color: #f1f1f1;\n    }\n\n    ::placeholder {\n        color: rgba(77, 77, 77, 0.8) !important;\n        font-size: 0.8rem !important;\n        font-weight: 400;\n    }\n\n    label {\n        margin-right: 1em;\n    }\n\n    input{\n        margin-right: 0.5em;\n    }\n</style>",
    "<script>\n    import {selectedItem, mapObject} from '../../stores'\n    import MaterialIcon from '../MaterialIcon.svelte'\n\n    export let item\n\n    function selectItem(item) {\n        selectedItem.select(item, $mapObject, item.coordinates)\n    }\n\n    $: pickup = item['Pickup Offered'].toLowerCase().includes('yes')\n    $: delivery = item['Delivery Offered'].toLowerCase().includes('yes')\n    $: outsideSeating = item['Outdoor Space'].trim().length\n</script>\n\n<div class=\"item\">\n    <a class=\"link\" role=\"listitem\" href=\"#\" on:click={() => selectItem(item)}>\n        <p class=\"is-6 subtitle is-marginless notranslate\" translate=\"no\">{item.Name}</p>\n        <div class=\"icons\">\n            {#if outsideSeating}\n                <MaterialIcon icon=\"deck\" alt=\"Outdoor Space\"/>\n            {/if}\n            {#if pickup}\n                <MaterialIcon icon=\"local_mall\" alt=\"Pickup Offered\"/>\n            {/if}\n            {#if delivery}\n                <MaterialIcon icon=\"moped\" alt=\"Delivery Offered\"/>\n            {/if}\n        </div>\n    </a>\n    <img class=\"category-icon\" src=\"./icons/{item.icon}\" style=\"opacity: {item._closed ? 0.5 : 1}\"/>\n</div>\n\n<style>\n    a {\n        color: #0e0e0e;\n        text-decoration: none;\n        display: block;\n\n    }\n\n    .item {\n        position: relative;\n        width: 100%;\n    }\n\n    .link {\n        padding: 10px 10px;\n        text-decoration: none;\n        border-bottom: 1px solid rgba(170, 170, 170);\n    }\n\n    .category-icon {\n        position: absolute;\n        right: 10px;\n        top: 10px;\n        width: 24px;\n        height: 28px;\n    }\n\n    .icons {\n        display: flex;\n        flex-direction: row;\n        align-items: flex-end;\n        font-size: 1.2rem;\n    }\n\n    a:hover, a:focus {\n        background-color: #ecf1f8;\n    }\n\n    a:focus{\n        border: 1px dotted #8e8e90;\n        border-bottom: none;\n    }\n</style>\n",
    "<script>\n    import RowItem from './RowItem.svelte'\n    export let show\n    export let items;\n</script>\n\n<div class=\"listings {show ? '' : 'is-hidden'}\" role=\"list\" aria-label=\"listings\">\n    {#each items as item (item.id)}\n        <RowItem {item}/>\n    {/each}\n</div>\n\n\n<style>\n    .listings {\n        position: absolute;\n        height: 100%;\n        width: 100%;\n    }\n</style>",
    "<script>\n    import {selectedItem} from '../../../stores'\n    import MarkdownField from './MarkdownField.svelte'\n    import ItemDetailsInfo from './ItemDetailsInfo.svelte'\n    import PickupDelivery from './PickupDelivery.svelte'\n    import LastUpdated from './LastUpdated.svelte'\n    import Status from './Status.svelte'\n    import MaterialIcon from '../../MaterialIcon.svelte'\n\n    $: item = $selectedItem\n\n    let subCategories = []\n\n    $: if (item) subCategories = item['Sub-Category'].split(',').filter(tag => tag.trim())\n\n    function resetSelect() {\n        selectedItem.select(null)\n    }\n</script>\n\n<div class=\"details\">\n    <div class=\"header\">\n        <button class=\"button is-small back\" on:click={resetSelect}>\n            <MaterialIcon icon=\"keyboard_backspace\"/>\n        </button>\n        <img class=\"icon\" src=\"./icons/{item.icon}\"/>\n    </div>\n    <div class=\"content\">\n        <h4 class=\"is-5 subtitle is-marginless notranslate\" translate=\"no\">{item.Name}</h4>\n        <p class=\"address\">\n            <span class=\"notranslate\" translate=\"no\">{item.Address}</span>\n            <a href=\"http://maps.google.com/?q={item.Address}\" target=\"_blank\">\n                <MaterialIcon icon=\"pin_drop\"/>\n            </a>\n        </p>\n        <Status status={item.Status}/>\n\n        <div class=\"category\">\n            <strong>{item.Category} - </strong>\n            {#if subCategories.length}\n                <div class=\"tags are-small\">\n                    {#each subCategories as tag}\n                        <span class=\"tag\">{tag}</span>\n                    {/each}\n                </div>\n            {/if}\n        </div>\n\n        {#if item['Outdoor Space'].trim().length}\n            <div class=\"category\">\n                <strong>Outdoor Space -</strong>\n                <p><span class=\"tag is-primary is-small\">{item['Outdoor Space']}</span></p>\n            </div>\n        {/if}\n\n        <ItemDetailsInfo text={item.Email} icon=\"email\" type=\"email\"/>\n        <ItemDetailsInfo text={item.Phone} icon=\"local_phone\" type=\"phone\"/>\n        <ItemDetailsInfo url={item['Website/Social Media']} text=\"Website/Instagram\" icon=\"public\" type=\"website\"/>\n        <ItemDetailsInfo url={item.Donate} text=\"Donate\" icon=\"card_giftcard\" type=\"website\"/>\n\n        <MarkdownField title=\"Hours\" content={item.Hours}/>\n        <MarkdownField title=\"Special Accommodation Hours\" content={item['Special Accommodation Hours']}/>\n<!--        <MarkdownField title=\"Notes\" content={item.Notes}/>-->\n        <hr>\n\n        <PickupDelivery\n                pickup={item['Pickup Offered']}\n                delivery={item['Delivery Offered']}\n                notes={item['Delivery/Pickup Notes']}\n        />\n\n        <LastUpdated lastUpdated={item['Last Updated']} source={item['Source']}/>\n\n    </div>\n</div>\n\n<style>\n    .details {\n        padding-top: 10px;\n        margin-left: 0.5rem;\n        height: 100px;\n    }\n\n    .header {\n        display: flex;\n        flex-direction: row;\n        align-items: center;\n\n    }\n\n    .back {\n        margin-right: 5px;\n    }\n\n    .icon {\n        width: 32px;\n        height: 35px;\n        position: absolute;\n        right: 5px;\n    }\n\n    .address {\n        font-size: 0.9rem;\n    }\n\n    .category {\n        display: flex;\n        flex-direction: row;\n    }\n\n    .category * {\n        margin-right: 5px;\n    }\n\n    .content {\n        margin-top: 1rem;\n    }\n\n    .content * {\n        margin-bottom: 5px;\n    }\n\n</style>",
    "<script>\n    import {formatPhoneNumber, getValidUrl} from '../../../utils/textFormatting'\n    import MaterialIcon from '../../MaterialIcon.svelte'\n\n    export let text = ''\n    export let url = ''\n    export let icon = 'indeterminate_check_box'\n    export let type = 'text'\n\n</script>\n\n{#if url.trim() || (['email','phone'].includes(type) && text.trim())}\n    {#if type === 'email'}\n        <a href=\"mailto:{text}\">\n            <p class=\"info\">\n                <MaterialIcon icon={icon} alt=\"Email Address\"/>{text}\n            </p>\n        </a>\n    {:else if type === 'phone'}\n        <a href=\"tel:{formatPhoneNumber(text)}\">\n            <p class=\"info\">\n                <MaterialIcon icon={icon} alt=\"Phone Number\"/>{text}\n            </p>\n        </a>\n    {:else if type === 'website'}\n        <a target=\"_blank\" href=\"{getValidUrl(url)}\">\n            <p class=\"info\">\n                <MaterialIcon icon={icon} alt=\"Website\"/>{text}\n            </p>\n        </a>\n    {:else}\n        <p class=\"info\">\n            <MaterialIcon icon={icon}/>{text}\n        </p>\n    {/if}\n{/if}\n\n<style>\n    .info {\n        display: flex;\n        align-items: center;\n        font-size: 0.9rem;\n        margin-bottom: 5px;\n    }\n\n    .info span {\n        margin-right: 10px;\n    }\n</style>\n",
    "<script>\n    import {getValidUrl} from '../../../utils/textFormatting'\n\n    export let lastUpdated = ''\n    export let source = ''\n\n\n    $: date = new Date(lastUpdated).toLocaleString()\n    $: sourceIsLink = source.includes('http')\n</script>\n\n<p class=\"has-text-grey-light\">\n    {#if sourceIsLink}\n        <a href={getValidUrl(source)}>Updated: {date}</a>\n    {:else if source.trim().length > 0}\n        <abbr title={source}>Updated: {date}</abbr>\n    {:else}\n        Updated: {date}\n    {/if}\n</p>\n\n<style>\n    a:link {\n        color: #6d8dc7;\n    }\n</style>",
    "<script>\n    export let status\n\n    $: isOpened = status.toLowerCase().includes('open')\n</script>\n\n{#if isOpened}\n    <p><span class=\"tag is-success is-medium\">{status.toUpperCase()}</span></p>\n{:else}\n    <p><span class=\"tag is-warning is-medium\">{status.toUpperCase()}</span></p>\n{/if}\n\n<style>\n    .tag{\n        margin-top: 0.5rem;\n    }\n</style>",
    "<script>\n    import SlimSelect from './SlimSelect.svelte'\n    import {rows, filters} from '../../../stores'\n    import {categoryGroups, styles} from '../../../constants'\n\n    let selectedCategories = []\n    let categoryOptions\n\n    let selectedSubCategories = []\n    let subCategoryOptions\n\n    $: setupCategoryOptions($rows)\n\n    function setupCategoryOptions(rows) {\n        if (rows.length > 0) {\n            //reset\n            selectedCategories = []\n            //set up SlimSelect options\n            let options = categoryGroups.reduce((groups, groupLabel) => {\n                const options = styles\n                        .filter(cat => cat.group === groupLabel)\n                        .map(cat => ({\n                            text: cat.categoryName,\n                            value: cat.categoryName,\n                            innerHTML: `<span style=\"padding-left: 5px; border-left: 5px solid ${cat.fillColor};\">${cat.categoryName}</span>`\n                        }))\n\n                const uniqueOptions = options.filter((item1, index, self) => {\n                    const findIndex = self.findIndex(item2 => item1.text === item2.text)\n                    return findIndex === index\n                })\n\n                const group = {\n                    label: groupLabel,\n                    options: uniqueOptions\n                }\n\n                return [...groups, group]\n            }, [])\n\n            //get unique categories from rows\n            const uniqueCategories = Array.from(new Set(rows.map(({Category}) => Category)))\n            //filter for items not in groups\n            const otherGroup = uniqueCategories.filter(cat => !styles.map(i => i.categoryName).includes(cat))\n\n            categoryOptions = {\n                data: [...options, {\n                    label: 'Other',\n                    options: otherGroup.map(cat => ({text: cat, value: cat}))\n                }]\n            }\n        }\n    }\n\n    $: setupSubCategoryOptions($rows, selectedCategories)\n\n    function setupSubCategoryOptions(rows, selectedCategories) {\n        if (rows.length > 0 && selectedCategories) {\n            //reset\n            selectedSubCategories = []\n            const subCategories = rows.filter(({Category}) => selectedCategories.includes(Category))\n                    .map(c => c['Sub-Category'])\n                    .reduce((a, c) => {\n                        //split by comma\n                        return [...a, ...c.split(',')]\n                    }, [])\n                    .sort((a, b) => a.localeCompare(b))\n            const uniqueSubCategories = Array.from(new Set(subCategories))\n            subCategoryOptions = {data: uniqueSubCategories.map(c => ({text: c, value: c}))}\n        }\n    }\n\n    $: {\n        if ($filters) {\n            //remove existing filter\n            const _filters = $filters\n            const filter = _filters.findIndex(f => f.label === 'categories')\n            if (filter > -1) _filters.splice(filter, 1)\n            //generate new filter\n            if(selectedCategories || selectedSubCategories){\n                const categoryFilter = {\n                    label: 'categories',\n                    filter: (row) => {\n                        if (selectedCategories.length) {\n                            if (selectedSubCategories.length) {\n                                return selectedCategories.includes(row.Category) && row['Sub-Category'].includes(selectedSubCategories)\n                            } else {\n                                return selectedCategories.includes(row.Category)\n                            }\n                        } else {\n                            return true\n                        }\n                    }\n                }\n                filters.set([..._filters, categoryFilter])\n            }\n        }\n    }\n\n</script>\n\n{#if categoryOptions && 'data' in categoryOptions}\n    <SlimSelect bind:value={selectedCategories} options={categoryOptions} multiple={true} text=\"Categories\"/>\n{/if}\n\n{#if subCategoryOptions && 'data' in subCategoryOptions && subCategoryOptions.data.length}\n    <SlimSelect bind:value={selectedSubCategories} options={subCategoryOptions} multiple={true}\n                text=\"Sub-Categories\"/>\n{/if}\n\n\n<style>\n    :global(.ss-value) {\n        background-color: #878787 !important;\n        font-weight: 500;\n    }\n\n    :global(span.ss-disabled) {\n        font-size: 0.8em !important;\n        color: rgba(113, 113, 113, 0.8) !important;\n    }\n</style>\n",
    "<script>\n    import {rows, filters} from '../../../stores'\n    import FlexSearch from 'flexsearch'\n\n    export let textSearch = ''\n    let value = ''\n    let index;\n\n    $: if($rows){\n        index = new FlexSearch({\n            tokenize: \"forward\",\n            encode: \"advanced\",\n            resolution: 3,\n            depth: 3,\n            threshold: 3,\n            doc: {\n                id: \"id\",\n                field: [\n                    \"Name\",\n                    \"Category\",\n                    \"Sub-Category\"\n                ]\n            }\n        })\n        index.add($rows);\n    }\n\n\n    function _search() {\n        const matchedRows = index.search(value)\n        const matchedIds = matchedRows.map((item) => item.id)\n        //remove existing filter\n        const _filters = $filters\n        const filter = _filters.findIndex(f => f.label === 'name')\n        if (filter > -1) _filters.splice(filter, 1)\n        //generate new filter\n        const nameFilter = {\n            label: 'name',\n            filter: (row) => {\n                if (!value.trim()) return true\n                return matchedIds.includes(row.id)\n            }\n        }\n        filters.set([..._filters, nameFilter])\n    }\n</script>\n\n<div class=\"field\">\n    <label class=\"label\">Search by name</label>\n    <div class=\"field\">\n        <div class=\"control is-expanded\">\n            <input\n                    id=\"text-input\"\n                    placeholder=\"Search here\"\n                    type=\"text\"\n                    name=\"text-input\"\n                    bind:value\n                    autocomplete=\"off\"\n                    on:keyup=\"{_search}\"\n            />\n        </div>\n    </div>\n</div>\n\n<style>\n    form {\n        margin-bottom: 1rem;\n    }\n\n    #text-input {\n        width: 100%;\n        padding: 5px 5px;\n        box-sizing: border-box;\n        margin-bottom: 5px;\n    }\n\n    ::placeholder {\n        color: rgba(77, 77, 77, 0.8) !important;\n        font-size: 0.8rem !important;\n        font-weight: 400;\n    }\n</style>",
    "<script>\n    import {filters} from '../../../stores'\n\n    let showOpened = false\n\n    $: updateFilter(showOpened)\n\n    function updateFilter(showOpened) {\n        if ($filters) {\n            //remove existing filter\n            const _filters = $filters\n            const filter = _filters.findIndex(f => f.label === 'opened')\n            if (filter > -1) _filters.splice(filter, 1)\n            if (showOpened) {\n                //generate new filter\n                const openedFilter = {\n                    label: 'opened',\n                    filter: (row) => !row._closed\n                }\n                filters.set([..._filters, openedFilter])\n            } else {\n                filters.set(_filters)\n            }\n        }\n    }\n</script>\n<div class=\"field\">\n    <label class=\"label\">Status</label>\n    <label class=\"checkbox\">\n        <input type=\"checkbox\" bind:checked={showOpened}>Hide closed listings\n    </label>\n</div>\n\n<style>\n    label {\n        margin-right: 1em;\n    }\n\n    input{\n        margin-right: 0.5em;\n    }\n</style>",
    "<script>\n    import CategoryFilters from './CategoryFilters.svelte'\n    import OutdoorSeating from './OutdoorSeating.svelte'\n    import OpenedFilter from './OpenedFilter.svelte'\n    import PickupDeliveryFilter from './PickupDeliveryFilter.svelte'\n    import MaterialIcon from '../../MaterialIcon.svelte'\n\n    let opened = false\n\n</script>\n\n<CategoryFilters/>\n<OutdoorSeating/>\n<button class=\"full\" on:click={() => opened = !opened}>\n    More Filters <MaterialIcon size=\"small\" icon=\"{opened? 'expand_less' : 'expand_more'}\"/>\n</button>\n<div class={opened ? '' : 'hidden'}>\n    <OpenedFilter/>\n    <PickupDeliveryFilter/>\n</div>\n\n<style>\n    .full {\n        display: block;\n        width: 100%;\n        border: solid 1px #d5d5d5;\n        border-radius: 4px;\n        padding: 5px 10px;\n    }\n\n    .hidden{\n        display: none;\n    }\n</style>",
    "<script>\r\n    import MaterialIcon from '../../MaterialIcon.svelte'\r\n    import {filters} from '../../../stores'\r\n    let showFilter = false\r\n    $: filterLabel = `outdoor`\r\n    $: updateFilter(showFilter)\r\n    function updateFilter(showFilter) {\r\n        if ($filters) {\r\n            //remove existing filter\r\n            const _filters = $filters\r\n            const filter = _filters.findIndex(f => f.label === filterLabel)\r\n            if (filter > -1) _filters.splice(filter, 1)\r\n            if (showFilter) {\r\n                //generate new filter\r\n                const filter = {\r\n                    label: filterLabel,\r\n                    filter: (row) => {\r\n                        return row['Outdoor Space'].trim().length > 0\r\n                    }\r\n                }\r\n                filters.set([..._filters, filter])\r\n            } else {\r\n                filters.set(_filters)\r\n            }\r\n        }\r\n    }\r\n</script>\r\n\r\n<label class=\"checkbox\">\r\n    <MaterialIcon icon=\"deck\" alt=\"Outdoor Space\"/>\r\n    <input type=\"checkbox\" bind:checked={showFilter}>Outdoor Space\r\n</label>\r\n\r\n<style>\r\n    label {\r\n        margin-right: 1em;\r\n    }\r\n    input{\r\n        margin-right: 0.5em;\r\n    }\r\n</style>",
    "<script>\n    import {filters} from '../../../stores'\n\n    let showAll = true\n    let showPickup = false\n    let showDelivery = false\n\n\n    function changeShowAll(){\n        if(showAll){\n            showPickup = false\n            showDelivery = false\n        }\n    }\n\n    function clearShowAll(){\n        //clear show all when pickup or delivery is checked\n        if(showPickup || showDelivery) showAll = false\n        if(!showPickup && !showDelivery) showAll = true\n    }\n\n    $: updateFilter(showAll, showPickup, showDelivery)\n\n    function updateFilter(showAll, showPickup, showDelivery) {\n        if ($filters) {\n            //remove existing filter\n            const _filters = $filters\n            const filter = _filters.findIndex(f => f.label === 'pickup-delivery')\n            if (filter > -1) _filters.splice(filter, 1)\n            if (!showAll) {\n                //generate new filter\n                const pickupDeliveryFilter = {\n                    label: 'pickup-delivery',\n                    filter: (row) => {\n                        let bool = true\n                        if(showPickup){\n                            bool = bool && row['Pickup Offered'].toLowerCase().includes('yes')\n                        }\n                        if(showDelivery){\n                            bool = bool && row['Delivery Offered'].toLowerCase().includes('yes')\n                        }\n                        return bool\n                    }\n                }\n                filters.set([..._filters, pickupDeliveryFilter])\n            } else {\n                filters.set(_filters)\n            }\n        }\n    }\n</script>\n\n<div class=\"field\">\n    <label class=\"label\">Pickup/Delivery</label>\n    <label class=\"checkbox\">\n        <input type=\"checkbox\" bind:checked={showAll} on:change={changeShowAll}>All\n    </label>\n    <label class=\"checkbox\">\n        <input type=\"checkbox\" bind:checked={showPickup} on:change={clearShowAll}>Pickup\n    </label>\n    <label class=\"checkbox\">\n        <input type=\"checkbox\" bind:checked={showDelivery}  on:change={clearShowAll}>Delivery\n    </label>\n</div>\n\n\n<style>\n    label {\n        margin-right: 1em;\n    }\n\n    input{\n        margin-right: 0.5em;\n    }\n</style>"
  ],
  "names": [],
  "mappings": "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"
}